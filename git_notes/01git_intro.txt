•Version Control :-
a system that records changes to a file or set of files over time so that you can recall specific versions later.allow you to revert selected files back to previous state, revert the entire project back to previousbstate,compare changes over time, see who last modified etc.

•Local Version Control Systems:-

•Centralized Version Control Systems :-

•Distributed Version Control Systems :- 
fully mirror the repository, including its full history.

History of GIT
Linux kernal maintenance(1991-2002) changes pass around as patches & archived file. In 2002 start using proprietary DVCS called BitKeeper.
2005 their relationship broke down. so Linus Torvalds and other developed git.

•Speed
•Simple design
•Strong support for non-linear development (thousands of parallel branches)
•Fully distributed
•Able to handle large projects like the Linux kernel efficiently (speed and data size)

°CVS, Subversion, Perforce, Bazaar, and so on are delta-based version control while git thinks of its data more like a series of snapshots of a miniature filesystem. With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots.

°Most operations in Git need only local files and resources to operate — generally no information is needed from another computer on your network.

°Everything in Git is checksummed before it is stored and is then referred to by that checksum. This means it’s impossible to change the contents of any file or directory without Git knowing about it. This functionality is built into Git at the lowest levels and is integral to its philosophy. You can’t lose information in transit or get file corruption without Git being able to detect it.

The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git.

GIT's 3 main states that file can reside -

×Modified means that you have changed the file but have not committed it to your database yet.

××Staged means that you have marked a modified file in its current version to go into your next commit snapshot.

×××Committed means that the data is safely stored in your local database.

